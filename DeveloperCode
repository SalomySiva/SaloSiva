import pandas as pd
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate

from langchain_openai import OpenAI
import os
from dotenv import find_dotenv, load_dotenv

from docx import Document
from docx.shared import Inches
from docx import Document
from docx.shared import Pt

load_dotenv(find_dotenv())
os.environ["OPENAI_API_KEY"]=str(os.getenv("OPENAI_API_KEY"))


OpenAI.api_key = os.getenv('OPENAI_API_KEY')

# Load the DataFrame from the Excel file (replace 'your_excel_file.xlsx' with your actual file path)
input_excel_file = 'Policy_Sample_STM_v1.xlsx'
transformation_rules = pd.read_excel(input_excel_file)


# Initialize a set to store unique insert queries
unique_insert_queries = set()

# Iterate over unique target tables
unique_target_tables = transformation_rules['Tgt_Table'].unique()
unique_source_tables = transformation_rules['Src_Table'].unique()

for tgt_table in unique_target_tables:
    for src_table in unique_source_tables:
        # Check if both source table and target table have values
        if pd.notnull(src_table) and pd.notnull(tgt_table):
            # Filter rows based on the current target table and source table
            current_tgt_table_rows = transformation_rules[(transformation_rules['Tgt_Table'] == tgt_table) & (transformation_rules['Src_Table'] == src_table)]

            # Initialize lists to store column names and source columns for the current target table
            query = []

            # Iterate through each row in the filtered DataFrame and construct column names and source columns
            for _, row in current_tgt_table_rows.iterrows():
                # Check for NaN in 'Src Column Name' and 'Transformation Rule' columns
                if pd.notnull(row['Src Column Name']):
                    query.append(f"{row['Src Column Name']} as {row['Tgt Column Name']}")
                else:
                    if row['Transformation Rule'] == 'DIRECT':
                        query.append(f"{row['Src Column Name']} as {row['Tgt Column Name']}")
                    else:
                        query.append(f"{row['Transformation Rule']} as {row['Tgt Column Name']}")
            

            target_query = ' , '.join(query).replace("'", "").replace("[", "").replace("]", "").replace("nan", "NULL")
            
            # Check if target_query is not empty or null
            if target_query:
                # Construct the INSERT INTO query
                columns = ', '.join(current_tgt_table_rows['Tgt Column Name'])
                insert_query = f" Query for target table {tgt_table} : \n SELECT {target_query} FROM {src_table};"
                # Add the insert_query to the set of unique insert queries
                unique_insert_queries.add(insert_query)

model=ChatOpenAI(model="gpt-3.5-turbo")


